param n, integer,>0; #nombre de ville
param Nom {i in 1..n}, symbolic;  #nom des villes en caractère
param Cap {i in 1..n}, symbolic;
param Pop {i in 1..n},>=0;
param co {i in 1..n}; #coût d'exploitation des entrepôts
param capa{i in 1..n}; #capacité des entrepôts
param dmd {i in 1..n} := Pop[i]*1800; #demande de chaque client
param d {i in 1..n,j in 1..n},>=0; #distance entre ville i et j 
param ct{i in 1..n,j in 1..n} := d[i,j]*0.0002; #coût de transport de l'entrepôt i à la ville j


var x{i in 1..n, j in 1..n}; #quantité distribuée de i à j
var y{i in 1..n}, binary; #variable d'ouverture du dépot i

minimize cout_mensuel : sum{i in 1..n} co[i]*y[i] + sum{i in 1..n,j in 1..n} ct[i,j]*x[i,j];

dmdsat {j in 1..n} : sum {i in 1..n} x[i,j]=dmd[j];  #satisfaire la demande des clients
useless_delivering {i in 1..n} : sum {j in 1..n} x[i,j]<=capa[i]*y[i]; #n'affecte pas des entrepôts fermés
cst {i in 1..n,j in 1..n} : x[i,j]>=0; #en minimisation pas de quantité négative
cout_fixe : sum {i in 1..n} co[i]*y[i]<=350000;  #limitation des coûts fixes

solve;

printf"\n";
display cout_mensuel;
printf"\n";
printf "Coûts fixes : %d", sum {i in 1..n} co[i]*y[i];
printf"\n";
printf "Coûts de transport : %f", sum{i in 1..n,j in 1..n} ct[i,j]*x[i,j];
printf"\n";

printf"\n";

for {i in 1..n : y[i]=1} { 
	printf "Ouverture d'un entrepôt dans la ville %s \n", Nom[i]; #affichage de l'ouverture des dépôts avec le nom de la ville
		printf"Qui livrera les villes de :\n\n";
	for {j in 1..n : x[i,j]>0}{
	printf " -%s avec une quantité de %d litres \n",  Nom [j],x[i,j]; #affichage des quantités livrées
	}
printf"\n\n";}


data;


param n := 25;

param : Nom	Cap	Pop	co	capa:=
1	Brunil	Oui	183	100000	1300000
2	Orsted	Non	44	10000000000	0
3	Valenga	Non	32	10000000000	0
4	Fouilloux	Non	81	10000000000	0
5	Morloc	Non	57	10000000000	0
6	Klagstad	Oui	103	140000	1700000
7	Ulmeroni	Non	39	10000000000	0
8	Pontica	Non	64	10000000000	0
9	Stirlung	Oui	205	85000	1150000
10	Brolville	Non	76	10000000000	0
11	Hazencourt	Non	28	10000000000	0
12	Coltanza	Oui	237	120000	1490000
13	Marcinto	Non	90	10000000000	0
14	Mirapolis	Non	306	10000000000	0
15	Warbeck	Non	49	10000000000	0
16	Fort-Brigg	Oui	141	90000	1150000
17	Kubakta	Non	70	10000000000	0
18	Bliquetuit	Oui	183	135000	1600000
19	Stirendam	Oui	98	110000	1250000
20	Arpangel	Oui	166	108000	1800000
21	Jabertot	Oui	87	125000	1100000
22	Bragero	Non	24	10000000000	0
23	Zengistu	Non	81	10000000000	0
24	Ligerville	Non	69	10000000000	0
25	Trichester	Non	77	10000000000	0;


param d: 1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25 :=
1	0	1188	1453	1030	1742	724	789	647	747	641	1153	424	200	1062	1667	500	933	995	1882	1426	1422	1000	882	1632	1397
2	1188	0	570	915	614	637	1061	920	1020	546	512	937	1160	524	604	688	255	354	756	300	250	1327	479	506	583
3	1453	570	0	1485	608	1207	1631	1490	1590	812	300	1507	1653	1094	1174	953	825	458	925	870	320	1897	1049	789	1153
4	1030	915	1485	0	999	666	383	383	283	951	1426	606	830	391	669	1078	660	1268	1033	683	1165	412	571	889	400
5	1742	614	608	999	0	1019	1272	1130	1230	1145	633	1319	1542	680	620	1286	869	791	316	316	364	1411	861	180	599
6	724	637	1207	666	1019	0	424	283	383	554	1065	300	524	338	943	412	382	907	1159	702	887	740	158	909	674
7	789	1061	1631	383	1272	424	0	141	100	978	1490	365	589	591	1052	837	806	1332	1412	955	1311	316	582	1162	783
8	647	920	1490	383	1130	283	141	0	100	837	1348	224	447	450	1052	695	665	1190	1270	814	1170	458	441	1020	783
9	747	1020	1590	283	1230	383	100	100	0	937	1448	324	547	550	952	795	765	1290	1316	914	1270	416	541	1120	683
10	641	546	812	951	1145	554	978	837	937	0	512	707	841	561	1151	141	292	354	1303	846	781	1294	515	1053	896
11	1153	512	300	1426	633	1065	1490	1348	1448	512	0	1219	1353	1036	1116	653	767	158	949	812	269	1806	990	814	1095
12	424	937	1507	606	1319	300	365	224	324	707	1219	0	224	638	1243	566	682	1061	1459	1002	1187	681	458	1209	974
13	200	1160	1653	830	1542	524	589	447	547	841	1353	224	0	862	1467	700	905	1195	1682	1226	1410	800	682	1432	1197
14	1062	524	1094	391	680	338	591	450	550	561	1036	638	862	0	605	702	269	878	820	364	774	803	180	570	335
15	1667	604	1174	669	620	943	1052	1052	952	1151	1116	1243	1467	605	0	1292	859	958	364	304	854	1082	785	510	269
16	500	688	953	1078	1286	412	837	695	795	141	653	566	700	702	1292	0	433	495	1444	988	922	1153	570	1194	1038
17	933	255	825	660	869	382	806	665	765	292	767	682	905	269	859	433	0	609	1011	555	505	1072	224	761	605
18	995	354	458	1268	791	907	1332	1190	1290	354	158	1061	1195	878	958	495	609	0	1108	654	427	1648	832	860	936
19	1882	756	925	1033	316	1159	1412	1270	1316	1303	949	1459	1682	820	364	1444	1011	1108	0	456	680	1446	1000	250	633
20	1426	300	870	683	316	702	955	814	914	846	812	1002	1226	364	304	988	555	654	456	0	550	1095	544	206	283
21	1422	250	320	1165	364	887	1311	1170	1270	781	269	1187	1410	774	854	922	505	427	680	550	0	1577	729	544	833
22	1000	1327	1897	412	1411	740	316	458	416	1294	1806	681	800	803	1082	1153	1072	1648	1446	1095	1577	0	899	1301	812
23	882	479	1049	571	861	158	582	441	541	515	990	458	682	180	785	570	224	832	1000	544	729	899	0	750	516
24	1632	506	789	889	180	909	1162	1020	1120	1053	814	1209	1432	570	510	1194	761	860	250	206	544	1301	750	0	489
25	1397	583	1153	400	599	674	783	783	683	896	1095	974	1197	335	269	1038	605	936	633	283	833	812	516	489	0;


end;